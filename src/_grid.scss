/*_grid Start*/
/**
 * Grid
 * --------------------------------------------------
 * Using flexbox for the grid, inspired by Philip Walton:
 * http://philipwalton.github.io/solved-by-flexbox/demos/grids/
 * By default each .col within a .row will evenly take up
 * available width, and the height of each .col with take
 * up the height of the tallest .col in the same .row.
 */
.row,
.col {
  box-sizing: border-box;
}

.row-no-width {
  display: flex;
  padding: ($grid-padding-width / 2);
}

.row {
  @extend .row-no-width;
  margin-left: -$grid-padding-width;
  margin-right: -$grid-padding-width;
  width: calc(100% + 2 * #{$grid-padding-width});
}

.flex {
  display: flex;
}

.row-wrap {
  flex-wrap: wrap;
}

.row-nowrap {
  flex-wrap: nowrap;
}

.row-no-padding {
  padding: 0;
  margin: 0;
  width: 100%;

  > .col {
    padding: 0;
  }
}

// .row + .row {
//   margin-top: ($grid-padding-width / 2) * -1;
//   padding-top: 0;
// }

.column {
  @include flex(1);
}

.col {
  @include flex(1);
  display: block;
  padding: ($grid-padding-width / 2);
  width: 100%;
}

//box directions:
.box-vertical {
  flex-direction: column;
}

.box-horizontal {
  flex-direction: row;
}

.box-row-reverse {
  flex-direction: row-reverse;
}

.box-column-reverse {
  flex-direction: column-reverse;
}

/* Vertically Align Columns */
/* .row-* vertically aligns every .col in the .row */
.row-top {
  align-items: flex-start;
}
.row-bottom {
  align-items: flex-end;
}
.row-center {
  align-items: center;
}
.row-stretch {
  align-items: stretch;
}
.row-baseline {
  align-items: baseline;
}

/* Vertically Row Justify */
//start end center space-around space-between
.row-justify-start {
  justify-content: flex-start;
}

.row-justify-end {
  justify-content: flex-end;
}

.row-justify-center {
  justify-content: center;
}

.row-justify-stretch {
  justify-content: stretch;
}

.row-justify-between {
  justify-content: space-between;
}

.row-justify-around {
  justify-content: space-around;
}

/* .col-* vertically aligns an individual .col */
.col-top {
  align-self: flex-start;
}
.col-bottom {
  align-self: flex-end;
}
.col-center {
  align-self: center;
}
.col-stretch {
  align-self: stretch;
}

/* Column Offsets */
.col-offset-10 {
  margin-left: 10%;
}
.col-offset-20 {
  margin-left: 20%;
}
.col-offset-25 {
  margin-left: 25%;
}
.col-offset-33,
.col-offset-34 {
  margin-left: 33.3333%;
}
.col-offset-50 {
  margin-left: 50%;
}
.col-offset-66,
.col-offset-67 {
  margin-left: 66.6666%;
}
.col-offset-75 {
  margin-left: 75%;
}
.col-offset-80 {
  margin-left: 80%;
}
.col-offset-90 {
  margin-left: 90%;
}

/* Explicit Column Percent Sizes */
/* By default each grid column will evenly distribute */
/* across the grid. However, you can specify individual */
/* columns to take up a certain size of the available area */
.col-10 {
  @include flex(0, 0, 10%);
  width: 10%;
}
.col-20 {
  @include flex(0, 0, 20%);
  width: 20%;
}
.col-25 {
  @include flex(0, 0, 25%);
  width: 25%;
}
.col-30 {
  @include flex(0, 0, 30%);
  width: 30%;
}
.col-33,
.col-34 {
  @include flex(0, 0, 33.3333%);
  width: 33.3333%;
}
.col-40 {
  @include flex(0, 0, 40%);
  width: 40%;
}
.col-50 {
  @include flex(0, 0, 50%);
  width: 50%;
}
.col-60 {
  @include flex(0, 0, 60%);
  width: 60%;
}
.col-66,
.col-67 {
  @include flex(0, 0, 66.6666%);
  width: 66.6666%;
}
.col-70 {
  @include flex(0, 0, 70%);
  width: 70%;
}
.col-75 {
  @include flex(0, 0, 75%);
  width: 75%;
}
.col-80 {
  @include flex(0, 0, 80%);
  width: 80%;
}
.col-90 {
  @include flex(0, 0, 90%);
  width: 90%;
}
/*_grid End*/
